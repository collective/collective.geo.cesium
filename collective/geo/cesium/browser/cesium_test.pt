<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
      lang="en"
      metal:use-macro="here/main_template/macros/master"
      i18n:domain="collective.geo.file">
<head>
    <metal:javascript_head fill-slot="javascript_head_slot">
      <metal:use use-macro="context/@@collectivegeo-macros/openlayers" />
    </metal:javascript_head>
</head>
<body>
  <metal:content-core fill-slot="content-core">
    <metal:content-core define-macro="content-core">
        <div id="cesiumContainer"
        tal:attributes="style context/@@collectivegeo-macros/map_inline_css;"></div>
        <div id="loadingOverlay"><h1>Loading...</h1></div>
        <div id="baselayerchoser" tal:define="layers view/get_baselayers">
          <ul>
              <li><input type="radio" name="baselayers" value="1" id="bingair"/><label for="bingair">Bing Satellite</label></li>
              <li><input type="radio" name="baselayers" value="2" id="bingmap"/><label for="bingmap">Bing Map</label></li>
              <li><input type="radio" name="baselayers" value="3" id="binghybrid"/><label for="binghybrid">Bing Hybrid</label></li>
              <li><input type="radio" name="baselayers" value="0" id="osm" checked="checked"/><label for="osm">Open Street Map</label></li>
          </ul>
        </div>
        <!--div id="toolbar"></div-->
        <!--div id="dialog" title="Cesium and jQuery UI Demo"></div-->
        <script type="text/javascript">
        /*<![CDATA[*/
        $(window).bind("load", function(){
            // Create canvas element using jQuery:
            $('<canvas/>', {
                'id': 'glCanvas',
                'class': 'cesium-fullsize'
            }).appendTo('#cesiumContainer');

            var canvas = $('#glCanvas')[0];
            var scene = new Cesium.Scene(canvas);
            var primitives = scene.getPrimitives();

            scene.skyAtmosphere = new Cesium.SkyAtmosphere();
            // OpenStreetMap tile provider
            var osm = new Cesium.OpenStreetMapImageryProvider({
                url : 'http://tile.openstreetmap.org/'
            });

            // Bing Maps
            var bing_aerial = new Cesium.BingMapsImageryProvider({
                url : 'http://dev.virtualearth.net',
                mapStyle : Cesium.BingMapsStyle.AERIAL,
                // Some versions of Safari support WebGL, but don't correctly implement
                // cross-origin image loading, so we need to load Bing imagery using a proxy.
                //proxy : Cesium.FeatureDetection.supportsCrossOriginImagery() ? undefined : new Cesium.DefaultProxy('/proxy/')
            });

            var bing_road = new Cesium.BingMapsImageryProvider({
                url : 'http://dev.virtualearth.net',
                mapStyle : Cesium.BingMapsStyle.ROAD,
                // Some versions of Safari support WebGL, but don't correctly implement
                // cross-origin image loading, so we need to load Bing imagery using a proxy.
                //proxy : Cesium.FeatureDetection.supportsCrossOriginImagery() ? undefined : new Cesium.DefaultProxy('/proxy/')
            });

            var bing_hybrid = new Cesium.BingMapsImageryProvider({
                url : 'http://dev.virtualearth.net',
                mapStyle : Cesium.BingMapsStyle.AERIAL_WITH_LABELS,
                // Some versions of Safari support WebGL, but don't correctly implement
                // cross-origin image loading, so we need to load Bing imagery using a proxy.
                //proxy : Cesium.FeatureDetection.supportsCrossOriginImagery() ? undefined : new Cesium.DefaultProxy('/proxy/')
            });


            var ellipsoid = Cesium.Ellipsoid.WGS84;
            var centralBody = new Cesium.CentralBody(ellipsoid);
            centralBody.getImageryLayers().addImageryProvider(osm);
            centralBody.getImageryLayers().addImageryProvider(bing_aerial);
            centralBody.getImageryLayers().addImageryProvider(bing_road);
            centralBody.getImageryLayers().addImageryProvider(bing_hybrid);
            primitives.setCentralBody(centralBody);
            var l = centralBody.getImageryLayers().getLength();
            if (l>1){
                for (var i=1; i<l; ++i){
                    centralBody.getImageryLayers().get(i).show = false;
                };
            };

            //centralBody.getImageryLayers().get(2).show = false;

            var transitioner = new Cesium.SceneTransitioner(scene, ellipsoid);
            // Prevent right-click from opening a context menu.
            canvas.oncontextmenu = function() {
                return false;
            };

            function animate() {
                // INSERT CODE HERE to update primitives based on changes to animation time, camera parameters, etc.
            }

            function tick() {
                scene.initializeFrame();
                animate();
                scene.render();
                Cesium.requestAnimationFrame(tick);
            }
            tick();
            ///////////////////////////////////////////////////////////////////////////
            // Example resize handler

            var onResize = function() {
                var width = canvas.clientWidth;
                var height = canvas.clientHeight;

                if (canvas.width === width && canvas.height === height) {
                    return;
                }

                canvas.width = width;
                canvas.height = height;
                scene.getCamera().frustum.aspectRatio = width / height;
            };
            window.addEventListener('resize', onResize, false);
            onResize();

            $('#loadingOverlay').hide()

            function onBaseLayerOptionChange() {
                var l = centralBody.getImageryLayers().getLength();
                if (l>1){
                    for (var i=0; i<l; ++i){
                        if (i != $(this).val()) {
                            centralBody.getImageryLayers().get(i).show = false;
                        } else {
                            centralBody.getImageryLayers().get(i).show = true;
                        }
                    };
                };
            };

            $("#baselayerchoser").find("input").each(function(i) {
                $(this).change(onBaseLayerOptionChange);
            });




        })
        /*]]*/
        </script>
    </metal:content-core>
  </metal:content-core>
</body>
</html>
